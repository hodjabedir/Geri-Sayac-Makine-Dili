
BACK:
; ÖNCEKİ DURUMDAKİ DTATE TEMİZLENDİ
CLR P3.0
CLR P3.1
CLR P3.2
CLR P3.3


LCALL CONFIGURE_LCD
LCALL DELAY
MOV A,#':'
LCALL SEND_DATA

MOV TMOD,#12H ;RASGEKLE SAYI İÇİM T0M2 KULLANILDI
MOV TL0,#250  ;1 SN HESAPLAMAK İÇİN T1M1 KULLANILDI
SETB TR0     ; RASGELE SAYI İÇİN TİMER BAŞLADI

;------------SAYININ ALINMASI
LCALL KEYBOARD
LCALL SEND_DATA
SUBB A,#30H
MOV R0,A    ; ONLAR BASAMAĞI -> R0
LCALL KEYBOARD
LCALL SEND_DATA
SUBB A,#30H
MOV R1,A   ; BİRLER BASAMAĞI -> R1

MOV A,R0
MOV B,#10

MUL AB
ADD A,R1
MOV R2,A ; SAYI HALİNDE  -> R2

MOV A,R2
;---------------- SAYININ 5< <55 KONTOLÜ
CJNE  A,#5, DEVAM
;A=5
DEVAM: JNC NEXT
;A<5
LJMP FINISH
NEXT:  ;A > 5 
CJNE  A,#55,DEVAM2

DEVAM2: JC  NEXT2
;A > 55 
LJMP FINISH

NEXT2: ;A < 55


MOV B,#4
MOV A,TL0  ; TİMERİN DURDURLMASINA GEREK YOK ÇÜNKÜ SÜREKLİ SAYMASI UYGUN OLUR
DIV AB
MOV R7,B ;rANDOM DEĞER (0-4) ARASI
MOV R6,A
MOV A,R7

; --------------LEDLERİN RASTGELE YAKILMASI
; lEDLERİN YAKILMASININ GÖRÜLMESİ İÇİN SETB YERİNE CLR YAZILMALI
CLR P3.0
CLR P3.1
CLR P3.2
CLR P3.3
; ÖNCEKİ DURUMDAKİ DTATE TEMİZLENDİ
CJNE A,#0, LED1
SETB P3.0
LED1: CJNE A,#1, LED2
SETB P3.1
LED2:CJNE A,#2, LED3
SETB P3.2
LED3:CJNE A,#3, LED4
SETB P3.3
LED4:

SAYAC:
;1-SN İÇİN GEREKLİ SÜRE
MOV TH1,#HIGH 65136 ;65536-400 =65136
MOV TL1,#LOW 65136
SETB TR1
JNB TF1, $
CLR TF1
LCALL CONFIGURE_LCD
MOV A,#'0'
LCALL SEND_DATA
MOV A,#'0'
LCALL SEND_DATA
MOV A,#':'
LCALL SEND_DATA
MOV A,R2
MOV B,#10
DIV AB
ADD A,#30H
LCALL SEND_DATA
MOV A,B
ADD A,#30H
LCALL SEND_DATA

DJNZ R2,SAYAC
LJMP FINISH




FINISH:

LJMP BACK




;----------------------------
CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret


SEND_COMMAND:	;THIS  SUBROUTINE IS FOR SENDING THE COMMANDS TO LCD
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:	;THIS  SUBROUTINE IS FOR SENDING THE DATA TO BE DISPLAYED
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret

DELAY:	;A SHORT DELAY SUBROUTINE
	push 0
	push 1
	mov r0,#2
DELAY_OUTER_LOOP:
	mov r1,#2
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret
	
KEYBOARD: ;takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'
